#! /bin/sh
exec huginn -E "${0}" "${@}"
#! huginn

import Algorithms as algo;
import Mathematics as math;
import OperatingSystem as os;

invoke( cmd_, arg_ ) {
	p = os.spawn( cmd_, arg_ );
	res = "";
	out = p.out();
	while ( ( line = out.read_line() ) != none ) {
		res += line;
	}
	return ( res );
}

mandelbrot( x, y ) {
	c = math.Complex( x, y );
	z = math.Complex( 0., 0. );
	s = -1;
	for ( i : algo.range( 10 ) ) {
		z = z * z + c;
		if ( | z | > 2. ) {
			s = i;
			break;
		}
	}
	return ( s );
}

glyph( c ) {
	g = ' ';
	if ( c > 3 ) {
		if ( c > 8 ) {
			g = '@';
		} else if ( c > 5 ) {
			g = '%';
		} else {
			g = '*';
		}
	} else if ( c > 2 ) {
		g = '+';
	} else if ( c > 0 ) {
		g = '-';
	} else if ( c > -1 ) {
		g = '.';
	}
	return ( g );
}

main( argv_ ) {
	lines = 25;
	columns = 80;
	if ( size( argv_ ) == 3 ) {
		lines = integer( argv_[1] );
		columns = integer( argv_[2] );
	} else {
		envLines = os.env( "LINES" );
		envColumns = os.env( "COLUMNS" );
		if ( ( envLines != none ) && ( envColumns != none ) ) {
			lines = integer( envLines );
			columns = integer( envColumns );
		} else {
			lines = integer( invoke( "/usr/bin/tput", "lines" ) ) - 1;
			columns = integer( invoke( "/usr/bin/tput", "cols" ) ) - 1;
		}
	}
	lines -= 1;
	columns -= 1;
	yRad = 1.2;
	yScale = 2. * yRad / real( lines );
	xScale = 3. / real( columns );
	for ( y : algo.range( lines ) ) {
		line = "";
		for ( x : algo.range( columns ) ) {
			line += string( glyph( mandelbrot( xScale * real( x ) - 2.1, yScale * real( y ) - yRad ) ) );
		}
		print( line + "\n" );
	}
	return ( 0 );
}

