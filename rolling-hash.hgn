#! /bin/sh
exec huginn -E "${0}" "${@}"
#! huginn

import Mathematics as math;
import Algorithms as algo;
import Text as text;

enum DIRECTION {
	LEFT,
	RIGHT
}

class RollingHash {
	MOD = integer( $2 ^ $55 ) - 55;
	BASE = 101;
	INVERSE = 0;
	_specific = 1;
	_len = 0;
	_hash = 0;
	constructor( str_ ) {
		assert( type( str_ ) == string );
		INVERSE = math.modular_multiplicative_inverse( MOD, BASE );
		for ( c : str_ ) {
			if ( _len > 0 ) {
				_specific = ( _specific * BASE ) % MOD;
			}
			push( c, DIRECTION.RIGHT );
			_len += 1;
		}
	}
	push( in_, direction_ ) {
		if ( direction_ == DIRECTION.RIGHT ) {
			_hash *= BASE;
			_hash += integer( in_ );
		} else {
			p = math.modular_multiplication( _specific, integer( in_ ), MOD );
			_hash += p;
		}
		_hash %= MOD;
	}
	pop( out_, direction_ ) {
		if ( direction_ == DIRECTION.RIGHT ) {
			p = math.modular_multiplication( _specific, integer( out_ ), MOD );
			_hash -= p;
			_hash += MOD;
			_hash %= MOD;
		} else {
			_hash -= integer( out_ );
			_hash += MOD;
			_hash %= MOD;
			_hash = math.modular_multiplication( _hash, INVERSE, MOD );
		}
	}
	move( in_, out_, direction_ ) {
		assert( type( in_ ) == character );
		assert( type( out_ ) == character );
		pop( out_, direction_ );
		push( in_, direction_ );
	}
	hash() {
		return ( _hash );
	}
	len() {
		return ( _len );
	}
}

test( s, rhKey, rh, i ) {
	if ( rh.hash() == rhKey.hash() ) {
		print(
			"{}\n{}{}\n".format(
				s, text.repeat( " ", i ), text.repeat( "^", rhKey.len() )
			)
		);
	}
}

main( argv_ ) {
	if ( size( argv_ ) != 3 ) {
		return ( 1 );
	}

	s = argv_[2];
	keyLen = size( argv_[1] );

	rhKey = RollingHash( argv_[1] );
	print( "{:x}\n".format( rhKey.hash() ) );
	print( "MOD = {:x}, BASE = {:x}, INVERSE = {:x}\n\n".format( rhKey.MOD, rhKey.BASE, rhKey.INVERSE ) );

	rh = RollingHash( s[:keyLen] );

	print( "FORWARD >>>\n\n" );
	test( s, rhKey, rh, 0 );
	for ( i : algo.range( size( s ) - keyLen ) ) {
		rh.move( s[i + keyLen], s[i], DIRECTION.RIGHT );
		test( s, rhKey, rh, i + 1 );
	}

	rh = RollingHash( s[-keyLen:] );

	print( "\nBACKWARD <<<\n\n" );
	start = size( s ) - keyLen;
	test( s, rhKey, rh, start );
	for ( i : algo.range( start - 1, -1, -1 ) ) {
		rh.move( s[i], s[i + keyLen], DIRECTION.LEFT );
		test( s, rhKey, rh, i );
	}
	return ( 0 );
}

